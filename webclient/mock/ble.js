class BluetoothRemoteGATTDescriptor {

}

class BluetoothRemoteGattCharacteristic extends EventTarget {
  properties = {
    authenticatedSignedWrites: false,
    broadcast: false,
    indicate: false,
    notify: false,
    read: false,
    reliableWrite: false,
    writableAuxiliaries: false,
    write: false,
    writeWithoutResponse: false,
  };

  constructor(uuid, service, value) {
    super();
    this.uuid = uuid;
    this.service = service;
    this.value = value;
  }

  getDescriptor(descriptor) {
    return Promise.resolve(mockedDescriptors[descriptor])
  }
  getDescriptors(descriptor = null) {
    if (service) return Promise.all([this.getDescriptor(descriptor)]);
    return Promise.resolve(Object.values(mockedDescriptors));
  }
  readValue() {
    return Promise.resolve(this.value);
  }
  writeValue(value) {
    this.value = value;
    return Promise.resolve();
  }
  startNotifications() {
    return Promise.resolve();
  }
  stopNotifications() {
    return Promise.resolve();
  }
}

class BluetoothRemoteGATTService extends EventTarget {
  constructor(uuid, isPrimary, device) {
    super();
    this.uuid = uuid;
    this.isPrimary = isPrimary;
    this.device = device;
  }

  getCharacteristic(characteristic) {
    return Promise.resolve(mockedCharacteristics[characteristic])
  }
  getCharacteristics(service = null) {
    if (service) return Promise.all([this.getCharacteristic(characteristic)]);
    return Promise.resolve(Object.values(mockedCharacteristics));
  }

  getIncludedService(service) {
    return Promise.resolve(mockedServices[service])
  }
  getIncludedServices(service = null) {
    if (service) return Promise.all([this.getIncludedService(service)]);
    return Promise.resolve(Object.values(mockedServices));
  }
}

class BluetoothRemoteGATTServer extends EventTarget {
  device = null;
  connected = false;

  constructor(device) {
    super();
    this.device = device;
  }

  connect() {
    this.connected = true;
    return Promise.resolve(this);
  }
  disconnect() {
    this.connected = false;
    this.dispatchEvent(new Event('gattserverdisconnected'));
  }
  getPrimaryService(service) {
    return Promise.resolve(mockedServices[service])
  }
  getPrimaryServices(service = null) {
    if (service) return Promise.all([this.getPrimaryService(service)]);
    return Promise.resolve(Object.values(mockedServices));
  }
}

class BluetoothDevice extends EventTarget {
  id = 'ble-stub-device-id';
  name = 'ble-stub-device';
  gatt = new BluetoothRemoteGATTServer(this);
  uuids = [];
  watchingAdvertisements = false;

  constructor() {
    super();
    this.gatt.addEventListener('gattserverdisconnected',
      (e)=>this.dispatchEvent(new Event('gattserverdisconnected'))
    );
  }

  watchAdvertisements() {
    return Promise.reject();
  }

  unwatchAdvertisements() {
    return;
  }
}

const mockedDevice = new BluetoothDevice();

const mockedServices = {
  255: new BluetoothRemoteGATTService(255, true, mockedDevice),
}
const mockedCharacteristics = {
  65281: new BluetoothRemoteGattCharacteristic(65281, mockedServices[255], new DataView(new Uint8Array([]).buffer)),
  65282: new BluetoothRemoteGattCharacteristic(65282, mockedServices[255], new DataView(new Uint8Array([]).buffer)),
  65283: new BluetoothRemoteGattCharacteristic(65283, mockedServices[255], new DataView(new Uint8Array([]).buffer)),
}
const mockedDescriptors = {

}

mockedCharacteristics[65281].value = new DataView(new Uint8Array([
  0x04, 0x01,
]).buffer);


mockedCharacteristics[65282].value = new DataView(new Uint8Array([
  /* stripped eth header */ 0x02, 0x07,
  0x04, 0xf4, 0x92, 0xbf, 0x9c, 0x45, 0xc4, 0x04, 0x07, 0x07, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x34,
  0x06, 0x02, 0x00, 0x78, 0xfe, 0x07, 0x00, 0x12, 0xbb, 0x01, 0x00, 0x09, 0x04, 0xfe, 0x07, 0x00,
  0x12, 0xbb, 0x04, 0x12, 0x00, 0xff, 0x08, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x34, 0x0a, 0x08,
  0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x53, 0x57, 0x0c, 0x0a, 0x55, 0x42, 0x4e, 0x54, 0x2d, 0x55,
  0x53, 0x4c, 0x38, 0x4c, 0x0e, 0x04, 0x00, 0x04, 0x00, 0x04, 0xfe, 0x06, 0x00, 0x80, 0xc2, 0x01,
  0x00, 0x01, 0x00, 0x00
]).buffer);

mockedCharacteristics[65282].value = new DataView(new Uint8Array([
  /* stripped eth header */
  0x02, 0x07, 0x04, 0xaa, 0xe0, 0x4c, 0x68, 0x01,
  0x4b, 0x04, 0x07, 0x03, 0xaa, 0xe0, 0x4c, 0x68,
  0x01, 0x4b, 0x06, 0x02, 0x00, 0x78, 0x0a, 0x09,
  0x6c, 0x75, 0x63, 0x61, 0x62, 0x75, 0x6e, 0x74,
  0x75, 0x0c, 0x64, 0x55, 0x62, 0x75, 0x6e, 0x74,
  0x75, 0x20, 0x32, 0x30, 0x2e, 0x30, 0x34, 0x2e,
  0x32, 0x20, 0x4c, 0x54, 0x53, 0x20, 0x4c, 0x69,
  0x6e, 0x75, 0x78, 0x20, 0x35, 0x2e, 0x38, 0x2e,
  0x30, 0x2d, 0x34, 0x34, 0x2d, 0x67, 0x65, 0x6e,
  0x65, 0x72, 0x69, 0x63, 0x20, 0x23, 0x35, 0x30,
  0x7e, 0x32, 0x30, 0x2e, 0x30, 0x34, 0x2e, 0x31,
  0x2d, 0x55, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x20,
  0x53, 0x4d, 0x50, 0x20, 0x57, 0x65, 0x64, 0x20,
  0x46, 0x65, 0x62, 0x20, 0x31, 0x30, 0x20, 0x32,
  0x31, 0x3a, 0x30, 0x37, 0x3a, 0x33, 0x30, 0x20,
  0x55, 0x54, 0x43, 0x20, 0x32, 0x30, 0x32, 0x31,
  0x20, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x0e,
  0x04, 0x00, 0x9c, 0x00, 0x1c, 0x10, 0x0c, 0x05,
  0x01, 0xc0, 0xa8, 0x7a, 0x01, 0x02, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x10, 0x18, 0x11, 0x02, 0xfe,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
  0xf6, 0x32, 0xff, 0xfe, 0xa3, 0x97, 0xae, 0x02,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x06, 0x65,
  0x6e, 0x70, 0x33, 0x73, 0x30, 0xfe, 0x11, 0x00,
  0x80, 0xc2, 0x03, 0x00, 0xc8, 0x0a, 0x65, 0x6e,
  0x70, 0x33, 0x73, 0x30, 0x2e, 0x32, 0x30, 0x30,
  0xfe, 0x0f, 0x00, 0x80, 0xc2, 0x03, 0x00, 0x09,
  0x08, 0x65, 0x6e, 0x70, 0x33, 0x73, 0x30, 0x2e,
  0x39, 0xfe, 0x09, 0x00, 0x12, 0x0f, 0x03, 0x01,
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x09, 0x00, 0x12,
  0x0f, 0x01, 0x03, 0xec, 0xc1, 0x00, 0x1e, 0x00,
  0x00
]).buffer);

mockedCharacteristics[65282].value = new DataView(new Uint8Array([
  /* stripped eth header */
  0x02, 0x07, 0x04, 0x68, 0xd7, 0x9a, 0x24, 0x50, 0x5b, 0x04, 0x07, 0x07, 0x50, 0x6f, 0x72, 0x74,
  0x20, 0x37, 0x06, 0x02, 0x00, 0x78, 0xfe, 0x07, 0x00, 0x12, 0xbb, 0x01, 0x00, 0x01, 0x04, 0x08,
  0x06, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x37, 0x0a, 0x06, 0x55, 0x53, 0x57, 0x2d, 0x49, 0x54, 0x0c,
  0x0a, 0x55, 0x42, 0x4e, 0x54, 0x2d, 0x55, 0x53, 0x4c, 0x34, 0x38, 0x0e, 0x04, 0x00, 0x04, 0x00,
  0x04, 0xfe, 0x06, 0x00, 0x80, 0xc2, 0x01, 0x00, 0x14, 0x00, 0x00,
]).buffer);

mockedCharacteristics[65283].value = new DataView(new Uint8Array([
  0x00, 0x03, 0x0F,
  0x00, 0x0a, 0x03,
  0x00, 0xc8, 0x07,
]).buffer);

if (!navigator.bluetooth) navigator.bluetooth = {}
navigator.bluetooth.requestDevice = function(/* {filters: [{services: [serviceUuid]}] }*/) {
  return Promise.resolve(mockedDevice);
}
navigator.bluetooth.getAvailability = function() {
  return Promise.resolve(true);
}
